// config/corne.keymap

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        lt_repeat: layer_tap_repeat {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <120>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <150>;
            bindings = <&mo>, <&kp>;

            hold-trigger-on-release;
        };

        cmd_remap_d: cmd_remap_d {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp D>, <&kp LG(C)>;

            mods = <(MOD_LGUI)>;
        };

        cmd_remap_f: cmd_remap_f {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp F>, <&kp LG(V)>;

            mods = <(MOD_LGUI)>;
        };

        cmd_remap_s: cmd_remap_s {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp S>, <&kp LG(X)>;

            mods = <(MOD_LGUI)>;
        };

        cmd_remap_g: cmd_remap_g {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp G>, <&kp LG(F)>;

            mods = <(MOD_LGUI)>;
        };

        cmd_remap_colon: cmd_remap_colon {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COLON>, <&kp LC(C)>;

            mods = <(MOD_LGUI)>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&tog 5  &none   &kp W         &kp E         &kp R         &kp T        &kp Y                   &kp U               &kp I    &kp O  &none              &none
&kp Z   &kp A   &cmd_remap_s  &cmd_remap_d  &cmd_remap_f  &cmd_remap_g &kp H                   &kp J               &kp K    &kp L  &cmd_remap_colon   &kp LSHFT
&none   &gresc  &kp X         &kp C         &kp V         &kp B        &kp N                   &kp M               &kp P    &kp Q  &kp SLASH          &none
                              &lt 1 COMMA   &mt LGUI ESC  &lt 2 RET    &lt_repeat 3 BACKSPACE  &lt_repeat 4 SPACE  &kp DOT
            >;
        };

        layer_1 {
            bindings = <
&none  &none  &kp C_MUTE     &kp C_VOLUME_UP  &kp LG(PLUS)   &none        &kp BACKSLASH  &kp AT_SIGN       &kp HASH           &kp EQUAL  &none            &none
&none  &none  &kp LC(SPACE)  &kp C_VOL_DN     &kp LG(MINUS)  &none        &kp SEMI       &kp SINGLE_QUOTE  &kp DOUBLE_QUOTES  &kp QMARK  &kp EXCLAMATION  &none
&none  &none  &kp LC(M)      &kp LC(N)        &kp LC(Q)      &kp LC(P)    &none          &kp GRAVE         &kp GT             &kp LT     &none            &none
                             &none            &none          &none        &kp DOLLAR     &kp PERCENT       &kp CARET
            >;
        };

        layer_2 {
            bindings = <
&bt BT_CLR_ALL  &none         &none         &none         &none         &none           &kp MINUS         &kp LEFT_PARENTHESIS   &kp LEFT_BRACE    &kp LEFT_BRACKET   &none     &none
&none           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4    &kp LS(LA(LEFT))  &kp LS(DOWN_ARROW)     &kp LS(UP_ARROW)  &kp LS(LA(RIGHT))  &kp STAR  &none
&none           &none         &none         &none         &none         &none           &kp PLUS          &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACE   &kp RIGHT_BRACKET  &none     &none
                                            &none         &none         &trans          &kp AMPERSAND     &kp UNDERSCORE         &kp PIPE
            >;
        };

        layer_3 {
            bindings = <
&none  &none  &kp KP_N7  &kp KP_N8     &kp KP_N9  &kp LS(LG(T))    &none     &none     &none   &none      &none  &none
&none  &none  &kp KP_N4  &kp KP_N5     &kp KP_N6  &none            &kp LEFT  &kp DOWN  &kp UP  &kp RIGHT  &none  &none
&none  &none  &kp KP_N1  &kp KP_N2     &kp KP_N3  &none            &none     &none     &none   &none      &none  &none
                         &kp NUMBER_0  &kp KP_N0  &kp LG(RET)      &none     &none     &none
            >;
        };

        layer_4 {
            bindings = <
&none          &none          &kp LS(LG(P))   &kp LS(LG(E))  &kp LS(LG(N2))  &kp LG(T)        &none         &kp LS(TAB)  &kp TAB    &none          &none      &none
&kp LS(LG(I))  &kp LS(LG(X))  &kp LS(LG(Q))   &kp LS(LG(S))  &kp LS(LG(A))   &kp LC(Y)        &kp LA(LEFT)  &kp LA(J)    &kp LA(K)  &kp LA(RIGHT)  &kp LC(C)  &none
&none          &none          &kp LS(LG(N1))  &kp LS(LG(C))  &kp LS(LG(N3))  &none            &none         &none        &none      &none          &none      &none
                                              &kp LS(LG(Y))  &kp LS(LG(N4))  &kp LS(LG(O))    &trans        &none        &none
            >;
        };

layer_5 {
    bindings = <
&tog 5  &none  &none  &none  &none  &none    &none  &none  &none         &none      &none  &none
&none   &none  &none  &none  &none  &none    &kp LEFT  &kp DOWN  &kp UP_ARROW  &kp RIGHT  &none  &none
&none   &none  &none  &none  &none  &none    &none  &none  &none         &none      &none  &none
                     &kp DOWN  &kp UP_ARROW  &none    &none  &kp DOWN  &kp UP_ARROW
    >;
};

    };
};
